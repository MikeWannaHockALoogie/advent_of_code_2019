#wire_1= ['R2','U7','D3','R8']

#wire_2 =['R6','U7','L4','D4']

def get_path(wire):
    x = 0
    y = 0
    coordinates =[[x,y,None]]
    for i in wire:
        direction = i[0]
        length = int(i[1:])
        if direction == 'R':
            x += int(length)
            coordinates.append((x,y,'H',length))
        if direction == 'L':
            x -= int(length)
            coordinates.append((x,y,'H',length))
        if direction == 'U':
            y += int(length)
            coordinates.append((x,y,'V',length))
        if direction =='D':
            y -= int(length)
            coordinates.append((x,y,'V',length))
    return(coordinates)

#wire_1_path = get_path(wire_1)
#wire_2_path = get_path(wire_2)
#print(wire_1_path)
#print(wire_2_path)

def get_intersect(wire_path,other_wire_path):
    intersections =[]
    hline_plot =set()
    vline_plot =set()
    for coordinate in wire_path:
        if coordinate[2] == 'H':
            x1 =0
            x2 = x1 + coordinate[3]
            hline_plot =set(i for i in set(range(x1, x2)))
            #print(hline_plot)
        for other_coordinate in other_wire_path:
            if other_coordinate[2] =='V':
                y1 = 0
                y2 = y1 + other_coordinate[3]
                vline_plot = set(1 for i in set(range(y1,y2)))
                #print(vline_plot)
            if hline_plot.intersection(vline_plot):
                intersections.append([coordinate[0],other_coordinate[1]])
    #print(intersections)
    return intersections

def get_min_distance(intersections= []):
    distances = []
    for coordinates in intersections[1:]:
        distance = abs(coordinates[0]) +abs(coordinates[1])
        distances.append(distance)
    return min(distances)

# calculate closest interections point


data =open('scratch.txt','r')
lines =data.readlines()
wire_1 = lines[0].split(',')
wire_2 =lines[1].split(',')
#print(wire_1)
#print(wire_2)
wire_1_path = get_path(wire_1)
#print(wire_1_path)
wire_2_path = get_path(wire_2)
#print(wire_2_path)
print(get_intersect(wire_1_path,wire_2_path))
print(get_min_distance(get_intersect(wire_1_path,wire_2_path)))
